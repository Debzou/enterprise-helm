---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    coder.deployment: envproxy
  name: envproxy
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.envproxy.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  selector:
    matchLabels:
      coder.deployment: envproxy
  template:
    metadata:
      labels:
        coder.deployment: envproxy
    spec:
      # coder:coder
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      restartPolicy: Always
      # 4 hours
      terminationGracePeriodSeconds: {{ .Values.envproxy.terminationGracePeriodSeconds }}
      serviceAccountName: envproxy
{{- include "coder.serviceTolerations" . | indent 6 }}
      containers:
        - name: envproxy
          image: {{ .Values.envproxy.image | quote }}
          imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
          ports:
            - name: tcp-envproxy
              containerPort: 8080
{{- if eq .Values.ssh.enable true }}
            - name: ssh-envproxy
              containerPort: 2222
{{- end}}
          # envproxy is a daemon service, no need to allocate a tty for it.
          tty: false
          env:
            - name: HUMAN_LOG
              value: {{ .Values.logging.human | quote }}
            - name: JSON_LOG
              value: {{ .Values.logging.json | quote }}
            - name: STACKDRIVER_LOG
              value: {{ .Values.logging.stackdriver | quote }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VERBOSE
              value: "true"
            - name: CLUSTER_DOMAIN_SUFFIX
              value: {{ .Values.clusterDomainSuffix | quote }}
            - name: ENVPROXY_ACCESS_URL
              value: {{ include "coder.envproxy.accessURL" . | quote }}
            - name: SSH_ENABLED
              value: {{ .Values.ssh.enable | quote }}
            - name: CEMANAGER_ACCESS_URL
              value: {{ .Values.cemanager.accessURL | quote }}
            - name: CEMANAGER_TOKEN
              value: {{ .Values.cemanager.token | quote }}
{{- include "coder.namespaceWhitelist.env" . | indent 12 }}
{{- include "coder.devurls.hostEnv" . | indent 12 }}
          command:
            - /entrypoint.sh
            - envproxy
          readinessProbe:
            exec:
              command:
                - curl
                - -s
                - localhost:8080/healthz
            initialDelaySeconds: 30
            failureThreshold: 12
            # Poll envproxy every 20 seconds. If we fail 12 times (4 minutes)
            # the manager is most likely in a bad spot. It's possible for
            # migrations to take extended periods of time, so we need to
            # account for that.
            periodSeconds: 20
          livenessProbe:
            exec:
              command:
                - curl
                - -s
                - localhost:8080/healthz
            initialDelaySeconds: 30
            failureThreshold: 14
            # Poll envproxy every 20 seconds. If we fail 12 times (4 minutes)
            # the manager is most likely in a bad spot. It's possible for
            # migrations to take extended periods of time, so we need to
            # account for that.
            periodSeconds: 20
{{- include "coder.resources" .Values.envproxy.resources | indent 10 }}
{{- include "coder.volumeMounts" . | indent 10 }}
{{- include "coder.volumes" . | indent 6 }}
---
apiVersion: v1
kind: Service
metadata:
  name: envproxy
  namespace: {{ .Release.Namespace | quote }}
spec:
  type: {{ .Values.serviceType | quote }}
  selector:
    coder.deployment: envproxy
  ports:
    - name: tcp-envproxy
      port: 8080
      protocol: TCP
{{- if eq .Values.ssh.enable true}}
    - name: tcp-ssh
      port: 2222
      protocol: TCP
{{- end }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: envproxy

# Create roles in each whitelisted namespace.
{{ $namespaces := append .Values.namespaceWhitelist .Release.Namespace }}
{{- range $namespaces }}
---
# The envproxy role lists the permissions the envproxy requires.
# It conditionally sets the pod security policy based on the
# helm value.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: envproxy
  namespace: {{ . | quote }}
rules:
  - apiGroups:
      - ""
      - "apps"
    resources:
      - services
      - pods
      - pods/exec
      - secrets
      - deployments
      - configmaps
      - persistentvolumeclaims
    verbs:
      - create
      - list
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
    # Necessary for gathering stats about an environment.
    verbs:
      - list
      - get
  - apiGroups:
      - networking.k8s.io
    resources:
      # Necessary for preventing inter-environment communication.
      - networkpolicies
    verbs:
      - create
      - delete
      - get
      - list
      - patch
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: {{ . | quote }}
  name: envproxy
subjects:
  - kind: ServiceAccount
    name: envproxy
    namespace: {{ $.Release.Namespace | quote }}
roleRef:
  kind: Role
  name: envproxy
  apiGroup: rbac.authorization.k8s.io
{{- end }}
